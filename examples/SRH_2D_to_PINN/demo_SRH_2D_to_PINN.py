"""
This example converts the SRH-2D's mesh (internal points and boundary points) for the use of Physics-Informed Neural Network (PINN) training.
"""

import os
import sys

import pyHMT2D
from pyHMT2D.Misc.SRH_to_PINN_points import srh_to_pinn_points
from pyHMT2D.Misc.gmsh2d_to_srh import gmsh2d_to_srh

def convert_gmsh_to_srh(gmsh2d_fileName, srh2d_caseName):
    """
    Convert a Gmsh 2D mesh file to a SRH-2D srhgeom file.

    Parameters
    ----------
    gmsh2d_fileName : str
        The name of the Gmsh 2D mesh file.
    srh2d_caseName : str
        The name of the SRH-2D case file.
    """ 

    monitoringLines = []
 
    gmsh2d_to_srh(gmsh2d_fileName, srh2d_caseName, units="Meters",
                  bAddMonitoringLines=False, monitoringLines=monitoringLines)

def srh_to_pinn():
    """
    Convert the SRH-2D mesh to PINN points. A SRH-2D case is required. This example uses the block_in_channel case.
    """

    # Get the current directory
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Define the SRH-2D case file
    # You can use either .srhhydro or _SIF.dat file
    srhcontrol_file = os.path.join(current_dir, "block_in_channel.srhhydro")
    
    # Check if the file exists
    if not os.path.exists(srhcontrol_file):
        print(f"Error: File {srhcontrol_file} does not exist.")
        print("Please make sure you have the SRH-2D case file in the correct location.")
        return
    
    print(f"Processing SRH-2D case: {srhcontrol_file}")
    
    # Convert SRH-2D mesh to PINN points
    # refinement_pde=2 means generate 2 points per cell
    # refinement_bc=2 means generate 2 points per edge
    srh_to_pinn_points(srhcontrol_file, refinement_pde=1, refinement_bc=2)
        
    print("\nConversion of SRH-2D mesh to PINN points completed successfully!")
    print("Generated files:")
    print("1. mesh_points.json - Contains all points for PINN training")
    print("2. equation_points.vtk - Visualization of interior points")
    print("3. boundary_points.vtk - Visualization of boundary points with normal vectors")

    # Convert SRH-2D simulation results to PINN data
    #create the SRH_2D_Data object
    my_srh_2d_data = pyHMT2D.SRH_2D.SRH_2D_Data(srhcontrol_file)

    #read SRH-2D result in XMDF format (*.h5)
    #wether the XMDF result is nodal or cell center
    bNodal = False

    my_srh_2d_data.readSRHXMDFFile("block_in_channel_XMDFC.h5", bNodal)

    #export to VTK
    my_srh_2d_data.outputXMDFDataToPINNData(bNodal, bBoundary=True)

    return

if __name__ == "__main__":

    gmsh2d_fileName = "block_in_channel.msh"    
    srh2d_caseName = "block_in_channel"

    # Convert Gmsh 2D mesh to SRH-2D srhgeom file (optional; the mesh could be generated by SMS)
    #convert_gmsh_to_srh(gmsh2d_fileName, srh2d_caseName)

    #convert SRH-2D mesh to PINN points and SRH-2D simulation results to PINN data
    srh_to_pinn()    

    print("Done!")




